% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_data.R
\name{generate.latent.ggm.data}
\alias{generate.latent.ggm.data}
\title{Simulate data from a Gaussian graphical model with hidden variables}
\usage{
generate.latent.ggm.data(
  n,
  p,
  h,
  sparsity = 0.02,
  sparsity.latent = 0.7,
  outlier.fraction = 0
)
}
\arguments{
\item{n}{Number of samples.}

\item{p}{Number of observed variables.}

\item{h}{Number of hidden variables.}

\item{sparsity}{Real between 0 and 1. The density of the sparse graph (encoded by \eqn{K_X}).}

\item{sparsity.latent}{Real between 0 and 1. Probability of connection between any
observed variable and any hidden variable (\eqn{K_{LX}}).}

\item{outlier.fraction}{Fraction of the samples that should be drawn from a Cauchy
distribution. The remaining ones are drawn from a multivariate normal with the same
scale matrix.}
}
\value{
A list with keys:
  \describe{
    \item{obs.data}{n x p data matrix of observed variables.}
    \item{full.data}{(n+h) x p data matrix which also contains the hidden variables.}
    \item{precision.matrix}{ (n+h)x(n+h) matrix from which the data was sampled. Rows/Columns indexed by 1:p correspond to observed variables. The remaining h rows/cols are the hidden ones.}
    \item{sparsity}{Realised sparsity of the precision matrix restricted to observed variables.}
 }
}
\description{
A partitioned inverse covariance (precision) matrix K is constructed as \eqn{K := [K_X, K_{XL}; K_{XL}^T, K_L]}, where \eqn{K_X} is a p x p sparse matrix,
  \eqn{K_{LX}} is a p x h matrix connecting the h hidden variables to observed ones and \eqn{K_L} is a h x h diagonal matrix.

  n samples are then drawn from a multivariate normal distribution: \eqn{N(0, K^{-1})} and only the first p variables are observed.

  This function is here to demonstrate the features of the package.
}
\examples{
 n <- 2000 # Number of samples
 p <- 100 # Number of variables
 h <- 5 # Number of hidden variables
 sim.data <- generate.latent.ggm.data(n=n, p=p, h=h, outlier.fraction = 0.0,
                               sparsity = 0.02, sparsity.latent = 0.7)
 true.S <- sim.data$precision.matrix[-((p+1):(p+h)),-((p+1):(p+h))] # The sparse matrix
 observed.data <- sim.data$obs.data

 # Generate data with 10 of samples drawn from a Cauchy
 sim.data <- generate.latent.ggm.data(n=n, p=p, h=h, outlier.fraction = 0.1,
                               sparsity = 0.02, sparsity.latent = 0.7)
 true.S <- sim.data$precision.matrix[-((p+1):(p+h)),-((p+1):(p+h))] # The sparse matrix
 observed.data <- sim.data$obs.data

}
